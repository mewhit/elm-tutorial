-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Generated.InputObject exposing (..)

import Generated.Interface
import Generated.Object
import Generated.Scalar
import Generated.ScalarCodecs
import Generated.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildExcerciseSolutionInput :
    ExcerciseSolutionInputRequiredFields
    -> ExcerciseSolutionInput
buildExcerciseSolutionInput required____ =
    { excerciseId = required____.excerciseId, code = required____.code }


type alias ExcerciseSolutionInputRequiredFields =
    { excerciseId : String
    , code : String
    }


{-| Type for the ExcerciseSolutionInput input object.
-}
type alias ExcerciseSolutionInput =
    { excerciseId : String
    , code : String
    }


{-| Encode a ExcerciseSolutionInput into a value that can be used as an argument.
-}
encodeExcerciseSolutionInput : ExcerciseSolutionInput -> Value
encodeExcerciseSolutionInput input____ =
    Encode.maybeObject
        [ ( "excerciseId", Encode.string input____.excerciseId |> Just ), ( "code", Encode.string input____.code |> Just ) ]
